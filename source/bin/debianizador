#!/bin/bash


## source of files tree
SRC="source"
EXIT=""
CONTROL_FILE="./debian/control"

function working_directory()
{
    echo
    WORKING_DIRECTORY=${1}
    if [[ -n "${WORKING_DIRECTORY}" ]] ; then
        if [[ -d "${WORKING_DIRECTORY}" ]] ; then
            echo -e "Working directory:\n $(realpath ${WORKING_DIRECTORY})"
            cd $(realpath ${WORKING_DIRECTORY})
        else
            echo "The directory:"
            echo "$(realpath ${WORKING_DIRECTORY})"
            echo "does not exist"
            exit 1
        fi
    else
        echo "Warnnig!  $(basename $0) "
        echo "It is mandatory directory with a project and a DEBIAN folder"
        echo "run $(basename $0) -h to show help message"
        exit 1
    fi
    echo
}

# if SRC exists
function check_sources()
{
    if [[ -L ${SRC} ]] ; then
        echo "Source \"./${SRC}\" is a symbolic link"
    elif [[ -d ${SRC} ]] ; then
        echo "Source \"./${SRC}\" is a directory"
    else
        echo -e "Warning!"
        echo -e "Source directory \"./${SRC}\" doesn't exists"
        DIRS=$(find  ./  -maxdepth 1 -mindepth 1 -type d  -not -name "debian")
        if [[ $(echo $DIRS | wc -w) -eq 1 ]] ; then
            check_symlink ${DIRS}
        else
            echo "There are to many directories:"
            for f in ${DIRS} ; do echo $f ; done
            echo -e "Run it with -l \"target\": (i.e.)"
            echo -e "  $(basename $0) -l <source_directory> <project_directory>"
            exit 1
        fi
    fi
    echo
}

function create_symlink()
{
    local TARGET="${1}"
    if [[ ! -L ${SRC} ]] ; then
        ln -s ${TARGET} ${SRC} && echo -e "Creating \"${SRC}\" symlink to \"${CREATE_LINK}\""
    elif [[ -d  ${TARGET} ]] ; then
        echo -e "Symbolic link \"${SRC}\" yet exists"
    else
        echo -e "Warning! \n\"${TARGET}\" is not a directory"
        exit 1
    fi
    echo
}

function check_symlink()
{
    local TARGET="${1}"
    local IN=""
    if [[ -L ${SRC} ]] ; then
        echo -e "Symlink \"${SRC}\" yet exists pointing to \"$(readlink ${SRC})\""
    elif [[ -d ${SRC} ]] ; then
        echo -e "\"${SRC}\" is a directory"
    else
        echo -ne "Do you want to create a \"src\" simlink\ntargeted to \"${TARGET}\" directory  (y/N)?"
        IN=''
        read -sn1 IN
        echo
        if [[ $IN =~ ^[Yy]$ ]] ; then
            create_symlink ${TARGET}
        else
            exit 1
        fi
        check_sources
    fi
    echo
}

function check_control_file()
{
    if [[ ! -d "./debian" ]] ; then
        echo "A \"debian\" folder with at least a control file is mandatory"
        echo -ne "Do you want to create \"debian\" folder? (y/N)"
        IN=''
        read -sn1 IN
        echo
        if [[ $IN =~ ^[Yy]$ ]] ; then
            mkdir -p ./debian
        else
            echo "Exiting"
            exit 1
        fi
        echo
    fi
    
    if [[ ! -e ${CONTROL_FILE} ]]  || [[ -z $(cat ${CONTROL_FILE}) ]] ; then
        echo "Error: You must to create a control file"
        echo -ne "Do you want to create a \"control\" file? (y/N)"
        IN=''
        read -sn1 IN
        echo
        if [[ $IN =~ ^[Yy]$ ]] ; then
            create_control_file
        else
            exit 1
        fi
        echo
    else
        # Formating control file
        (sed -i -e "/^[[:space:]]*$/d" \
        -e "/Description:/,/^$/ {s# *\([[:alnum:]]\+\)# \1#}" \
        -e "s/^ *\(Package:\) *\([[:alnum:]]*\)/\1 \2/" \
        -e "s/^ *\(Version:\) *\([[:alnum:]]*\)/\1 \2/" \
        -e "s/^ *\(Section:\) *\([[:alnum:]]*\)/\1 \2/" \
        -e "s/^ *\(Priority:\) *\([[:alnum:]]*\)/\1 \2/"  \
        -e "s/^ *\(Architecture:\) *\([[:alnum:]]*\)/\1 \2/" \
        -e "s/^ *\([[:alnum:]]\+:\) *\([[:alnum:]]*\)/\1 \2/" \
        -e '$a\' ${CONTROL_FILE} && ([[ -s ${CONTROL_FILE}  ]] \
        && echo "Formating \"control\" file")) \
        || (echo "Error formating \"control\" fil" && exit 1)
    fi
    
}

function create_control_file()
{
    touch ${CONTROL_FILE}
    chmod 664 ${CONTROL_FILE}
    echo -e "Package: (package name)" >> ${CONTROL_FILE}
    echo -e "Version: (i.e. 1.0-1)" >> ${CONTROL_FILE}
    echo -e "Section: [admin|..|devel|games|sound|...]"  >> ${CONTROL_FILE}
    echo -e "Priority: (required|important|standart|optional|extra)" >> ${CONTROL_FILE}
    echo -e "Architecture: [all|i386|amd64|...]" >> ${CONTROL_FILE}
    echo -e "Depends: (foo (>= 1.5.0), bar | baz, qux)" >> ${CONTROL_FILE}
    echo -e "Maintainer: Juan Ramon Castan" >> ${CONTROL_FILE}
    echo -e "Description: (empty line finish)" >> ${CONTROL_FILE}
    echo
    autoedit_control_file
}

function autoedit_control_file()   
{

    local FILE="${CONTROL_FILE}"
    
    PACKAGENAME=""
    WW=" "
    sed "/^Package:.*/!d" ${CONTROL_FILE}
    while [[ -z ${PACKAGENAME} ]] ; do read -p "${WW}>> " PACKAGENAME ;  WW="!" ; done
    sed -i -e "s/\(^Package:\)\( *\)\(.*\)/\1 ${PACKAGENAME}/" ${CONTROL_FILE}

    NEWVERSION=""
    WW=" "
    sed "/^Version:.*/!d" ${CONTROL_FILE}
    while [[ -z ${NEWVERSION} ]] || [[ ! ${NEWVERSION} =~ ^[0-9]+\.[0-9]+([.]+[0-9]+)?([-]+.+)?$ ]]; do read -p "${WW}>> " NEWVERSION ; WW="!" ; done
    sed -i -e "s/\(^Version:\)\( *\)\(.*\)/\1 ${NEWVERSION}/" ${CONTROL_FILE}
    
    SECTION=""
    WW=" "
    sed "/^Section:.*/!d" ${CONTROL_FILE}
    while [[ -z ${SECTION} ]] ; do read -p "${WW}>> " SECTION ;  WW="!" ; done
    sed -i -e "s/\(^Section:\)\( *\)\(.*\)/\1 ${SECTION}/" ${CONTROL_FILE} 

    PRIORITY=""
    WW=" "
    sed "/^Priority:.*/!d" ${CONTROL_FILE}
    while [[ -z ${PRIORITY} ]] ; do read -p "${WW}>> " PRIORITY ; WW="!" ;  done
    sed -i -e "s/\(^Priority:\)\( *\)\(.*\)/\1 ${PRIORITY}/" ${CONTROL_FILE}

    ARCHITECTURE=""
    WW=" "
    sed "/^Architecture:.*/!d" ${CONTROL_FILE}
    while [[ -z ${ARCHITECTURE} ]] ; do read -p "${WW}>> " ARCHITECTURE ;  WW="!" ; done
    sed -i -e "s/\(^Architecture:\)\( *\)\(.*\)/\1 ${ARCHITECTURE}/" ${CONTROL_FILE}
    
    DEPENDS=""
    sed "/^Depends:.*/!d" ${CONTROL_FILE}
    read -p " >> " DEPENDS
    sed -i -e "s/\(^Depends:\)\( *\)\(.*\)/\1 ${DEPENDS}/" ${CONTROL_FILE}
     
    MAINTAINER="" #$(sed -e "/^Maintainer:/!d" -e "s/^Maintainer:\( *\)\(.+\)/\2/" ${CONTROL_FILE})
    sed -e "/^Maintainer:.*/!d" ${CONTROL_FILE}
    read -p " >> " MAINTAINER
    [[ -z ${MAINTAINER} ]]  || sed -i -e "s/\(^Maintainer:\)\( *\)\(.*\)/\1 ${MAINTAINER}/" ${CONTROL_FILE}
    
    DESCRIPTION=""
    sed -ne "/^ *Description/,/^$/p" ${CONTROL_FILE}
    read -p " >> " DESCRIPTION
    sed -i -e "s/\(^Description:\)\( *\)\(.*\)/\1 ${DESCRIPTION}/" ${CONTROL_FILE}
    while : ; do
        read -p " >> " DESCRIPTION
        [[ -n ${DESCRIPTION} ]]  && echo -e " ${DESCRIPTION}" >> ${CONTROL_FILE}
        [[ -n ${DESCRIPTION} ]] || break
        DESCRIPTION=""
    done
    echo
    edit_file ${CONTROL_FILE}
}

function read_control_file()
{
    local EDIT=$1
    local FILE="${CONTROL_FILE}"

    check_control_file

    # Taking vars from control file
    PACKAGE=$(sed -e '/^Package/!d' -e 's/Package:[[:space:]]\+\([[:alnum:]]\+\)\.*/\1/' -e "s/[[:space:]]\+//g" ${FILE})
    VERSION=$(sed -e '/^Version/!d' -e 's/Version:[[:space:]]\+\([[:alnum:]]\+.*\)/\1/' -e "s/[[:space:]]\+//g" ${FILE})
    ARCH=$(sed -e '/^Architecture/!d' -e 's/Architecture:[[:space:]]\+\([[:alnum:]]\+\)/\1/' -e "s/[[:space:]]\+//g" ${FILE})
    BUILD_DEST_DIR="${PACKAGE}_${VERSION}_${ARCH}"
    BUILD_PREFIX="/${BUILD_DEST_DIR}"
    # Show control file
    echo "********** control file *************"
    cat ${CONTROL_FILE}
    echo "*************************************"

    echo
    echo -e "debian package root directory:"
    echo -e "\t$(basename ${BUILD_PREFIX})"
    echo

}

function edit_file()
{
    local FILE="$1"
    echo -ne "Do you want to edit \"$FILE\" file (y/N)?"
    IN=''
    read -sn1 IN
    echo
    if [[ $IN =~ ^[Yy]$ ]] ; then
        nano "$FILE"
        read_control_file && edit_file ${FILE}
    fi
    echo
}

function change_version()
{
    # check_version
 
    if [[ ! ${VERSION} =~  ^[0-9]+\.[0-9]+([.]+[0-9]+)?([-]+.+)?$ ]] || [[ -z ${VERSION} ]]  ; then
        echo -e "Please, set version?"
        NEWVERSION=''
        sed "/^Version:.*/!d" ${CONTROL_FILE}
        while [[ -z ${NEWVERSION} ]] || [[ ! ${NEWVERSION} =~ ^[0-9]+\.[0-9]+([.]+[0-9]+)?([-]+.+)?$ ]]; do read -p "${WW}>> " NEWVERSION ; WW="!" ; done
        sed -i -e "s/\(^Version:\)\( *\)\(.*\)/\1 ${NEWVERSION}/" ${CONTROL_FILE}
        read_control_file && edit_file ${CONTROL_FILE}
    fi
    FILES=$(find . -type f -not -name "control" \( -exec grep -l -e "^#\{0,1\}[[:space:]]*Version:[[:space:]]\+[[:digit:]]\+.*" {} \; \)  )
    echo -e "Changing the next files to \"Version: ${VERSION}\""
    for F in ${FILES} ; do
        echo -e "${F}, with $(sed -e "/Version:[[:space:]]\+[[:digit:]]\+.*/!d" -e "s/^#* *\(Version:.*\)$/\1/" ${F})"
        sed  -i -e "s|\(Version:[[:space:]]\+\)\([[:digit:]]\+.*\)|\1${VERSION}|g" ${F}
        echo -e "Changed to $(sed -e "/Version:[[:space:]]\+[[:digit:]]\+.*/!d" -e "s/^#* *\(Version:.*\)$/\1/" ${F})"
    done
    echo
    
}

function prepare()
{
    IN=${1}
    if [[ ! ${IN} ]] ; then
        echo -ne "Do you want to PREPARE the files tree of DEB package\nusing \"Makefile\" and \"control\" file (y/N)?"
        read -sn1 IN
        echo
    fi
    if [[ $IN =~ ^[Yy]$ ]] ; then
        echo "Preparing files tree to build the package"
        [[ -e .debian/preinst ]] && chmod +x .debian/preinst
        [[ -e .debian/prerm ]] && chmod +x .debian/prerm
        [[ -e .debian/postinst ]] && chmod +x .debian/postinst
        [[ -e .debian/postrm ]] && chmod +x .debian/postrm
        mkdir -p "./${BUILD_DEST_DIR}/DEBIAN"
        cp ./debian/* ./${BUILD_DEST_DIR}/DEBIAN/
        cd "./${SRC}"
        echo ------------- ${WORKING_DIRECTORY}${BUILD_PREFIX}
        ([[ -e ./Makefile ]] && make  "BUILD=${WORKING_DIRECTORY}${BUILD_PREFIX}" install) || exit 1 
        cd ..
    else
        exit 0
    fi
    echo
}

function create()
{

    IN=${1}
    if [[ ! ${IN} ]] ; then
        echo -ne "Do you want to BUILD the package ${BUILD_DEST_DIR}.deb (y/N)?"
        read -sn1 IN
        echo
    fi
    
    if [[ $IN =~ ^[Yy]$ ]] ; then
        echo "Building the package"
        fakeroot dpkg-deb --build "${BUILD_DEST_DIR}" || exit 1
        #install ${1}
    else
        exit 0
    fi
    echo
}



function remove()
{

    echo -e "Removing debian root directory, package and symbolic link"
    read_control_file  > /dev/null
    if [[ $(find . -maxdepth 1 -mindepth 1 -type l) =~ "${SRC}" ]] ; then
        rm ./${SRC} && echo "Removing \"${SRC}\" symlink"
    else
        echo "Symbolic link \"${SRC}\" does not exist"
    fi

    ([[ -e ./${BUILD_DEST_DIR} ]] && rm -fR "./${BUILD_DEST_DIR}" && echo -e "Removing ${BUILD_DEST_DIR} directory") || echo "./${BUILD_DEST_DIR} does not exist"
    [[ -e ./${BUILD_DEST_DIR}.deb ]] && rm "./${BUILD_DEST_DIR}.deb" && echo -e "Removing ${BUILD_DEST_DIR}.deb package" || echo "./${BUILD_DEST_DIR}.deb does not exist"
        echo
}






function mssg_help()
{
   ( cat <<EOF
Description: It builds a .deb package from sources.

Usage:
  $(basename $0) [-h] [-l <SOURCE_DIRECTORY>] [-y] [-c -r -d] [<PROJECT_DIRECTORY>]
      
<PROJECT_DIRECTORY>
        Is the directory containing at least the source directory
        with its make files, and "debian" folder with "control" file.
        The files postinst, postrm, etc are optional.
        
        If a <PROJECT_DIRECTORY>  is not passsed as argument
        it will use the current directory.

Options:
  -h  Shows this message.
  -y  It assume YES for all questions: prepare, build and install.
  -l  <SOURCE_DIRECTORY>  Creates a "src" symlink to the target especified.
  -c  Execute clean from sources Makefile .
  -r  Removes the tree root directories of DEB package.
  -d  Removes "src" symlink.

A source directory is mandatory and a "Makefile" that
recreates the files tree in the package root directory.

A "debian" directory is necessary, with a "control" file
and optionally postinst, postrm, etc files, which content
will be copied to "DEBIAN" folder in the package root
directory named "Package_Version_Architecture" obtained
from "control" file.

The deb package will be named as package root directory 
with .deb extension:
  Package_Version_Architecture.deb

EOF
) | less
}

OPTIONS=$(getopt  -o "hycrl:" -n '$0' -- "$@")

if [ $? != 0 ] ; then
  exit 1 ;
fi

eval set -- "$OPTIONS"

while true ; do 
    case $1 in 
            -y)
                GLOBAL_IN='y'
                shift
                ;;
            -l)
                shift
                CREATE_LINK="${1}"
                shift
                ;;
            -h)
                mssg_help
                shift
                exit 0
                ;;
            -r)
                REMOVE="Y"
                EXIT="exit 0"
                shift
                ;;
            --)
                echo
                # Change to  <project_directory> 
                shift
                if [[ -n $1 ]] ; then
                    WD=$(realpath ${1})
                    shift
                else
                    WD=${PWD}
                    echo -e "Warning!"
                    echo -e "Argument <PROJECT_DIRECTORY> is not passed"
                    echo -e "It will use current directory"
                    echo -e "\"${WD}\""
                    echo -e "as project root directory"
                fi
                working_directory $(realpath ${WD})
                
                if  [[ -n "${REMOVE}" ]] ; then
                    remove
                fi
                ${EXIT}
                
                ## With -l option and $CREATE_LINK is the target
                if  [[ -n ${CREATE_LINK} ]] ; then
                    create_symlink ${CREATE_LINK} 
                fi
                
                check_sources
                read_control_file && edit_file ${CONTROL_FILE}
                change_version
                prepare 
                create 
                echo
                break
                ;;
            *)
                shift
                exit 1
                ;;
    esac
done

exit 0

